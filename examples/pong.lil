#configure {
	name: "Pong";
	//automaticFullScreen: true; //FIXME: enable this when scaling works
	onUpdateFn: true;
}

const.f64 windowWidth: 1200;
const.f64 windowHeight: 800;

var.bool goal: false;
var.i64 goalCounter: 0;
var.i64 goalCounterMax: 50;
var.i64 player1Score: 0;
var.i64 player2Score: 0;
var.i64 player1Gamepad: 0;
var.i64 player2Gamepad: 1;
var.bool useSoloMode: false;

var goalSound: @sequencerPlayback {
	notes: [
		@sequencerNote { freq: 261; duration: 0.15 },
		@sequencerNote { freq: 293; duration: 0.15 },
		@sequencerNote { freq: 880; duration: 0.15 }
	];
	count: 3;
};

var paddle1Sound: @sequencerPlayback {
	notes: [
		@sequencerNote { freq: 261; duration: 0.1 },
		@sequencerNote { freq: 440; duration: 0.1 }
	];
	count: 2;
};
var paddle2Sound: @sequencerPlayback {
	notes: [
		@sequencerNote { freq: 440; duration: 0.1 },
		@sequencerNote { freq: 261; duration: 0.1 }
	];
	count: 2;
};

var wallSound: @sequencerPlayback {
	notes: [
		@sequencerNote { freq: 392; duration: 0.05 }
	];
	count: 1;
};

var winSound: @sequencerPlayback {
	notes: [
		@sequencerNote { freq: 261; duration: 0.3 },
		@sequencerNote { freq: 293; duration: 0.3 },
		@sequencerNote { freq: 392; duration: 0.6 },
		@sequencerNote { freq: 880; duration: 0.6 }
	];
	count: 4;
};

fn onUpdate(var.f64 deltaTime) {
	applyUserInput();
	applyUserInput2();
	var player1: $(player1);
	var player2: $(player2);
	LIL__runSystems(deltaTime);
	limitPaddlePositions(player1, player2);
	var ball: $(ball);
	bounceOnEdges(ball);
	bounceOnPaddles(player1, player2, ball );
	
	checkForGoal(ball);
	if goal {
		goalCounterTick();
	}
};

fn applyUserInput () {
	var id: 5;
	var gamepad: input.getGamepad(player1Gamepad);
	//W -- up
	// fixme: I'd like this to be:
	// if input.isKeyDown(Keyboard.w) OR input.isKeyDown(Keyboard.upArrow) OR input.isKeyDown(GamePad.up) { }
	// until then, we are using the platform-specific codes for now
	var.bool upIsPressed: false;
	if input.isKeyDown(126i16) { upIsPressed: true }
	if input.isKeyDown(13i16) { upIsPressed: true }
	if gamepad.y > 0.3 { upIsPressed: true }

	//S -- down
	var.bool downIsPressed: false;
	if input.isKeyDown(125i16) { downIsPressed: true }
	if input.isKeyDown(1i16) { downIsPressed: true }
	if gamepad.y < (0.0f64 - 0.3f64) { downIsPressed: true }
	if (upIsPressed) {
		app.boxVelocities[id].y +: 1.5f64;
	} else if (downIsPressed) {
		app.boxVelocities[id].y -: 1.5f64;
	} else {
		app.boxVelocities[id].y: 0;
	}
};
fn applyUserInput2 () {
	var id: 6;
	var gamepad: input.getGamepad(player2Gamepad);
	//K -- up
	var.bool gpUpPressed: input.isGamepadButtonDown(player2Gamepad, 4);
	var.bool gpDownPressed: input.isGamepadButtonDown(player2Gamepad, 2);
	if useSoloMode {
		var gamepad1: input.getGamepad(player1Gamepad);
		gpUpPressed: gamepad1.y2 > 0.3;
		gpUpPressed: gpUpPressed OR input.isGamepadButtonDown(player1Gamepad, 4);
		gpDownPressed: gamepad1.y2 < (0.0f64 - 0.3f64);
		gpDownPressed: gpDownPressed OR input.isGamepadButtonDown(player1Gamepad, 2);
	}
	if ( input.isKeyDown(34i16) OR (gamepad.y > 0.3f64) OR gpUpPressed ) {
		app.boxVelocities[id].y +: 1.5f64;

	//I -- down
	} else if ( input.isKeyDown(40i16) OR (gamepad.y < (0.0f64 - 0.3f64)) OR gpDownPressed ) {
		app.boxVelocities[id].y -: 1.5f64;
	} else {
		app.boxVelocities[id].y: 0;
	}
};

fn limitPaddlePositions (var.@container player1; var.@container player2) {
	if ((player1.y + player1.height) > windowHeight) {
		player1.y: windowHeight - player1.height;
		player1.velY: 0;
	}
	if (player1.y < 0) {
		player1.y: 0;
		player1.velY: 0;
	}
	
	if ((player2.y + player2.height) > windowHeight) {
		player2.y: windowHeight - player2.height;
		player2.velY: 0;
	}
	if (player2.y < 0) {
		player2.y: 0;
		player2.velY: 0;
	}
}

fn bounceOnEdges (var.@container ball) {
	var top: ball.y + ball.height;
	var bottom: ball.y;
	var left: ball.x;
	var right: ball.x + ball.width;
	// printf(`x %f y %f \n`, ball.x, bottom);
	var velX: ball.velX;
	var velY: ball.velY;
	if (bottom <= 0) {
		if (velY < 0) {
			velY: (velY * (-1f64)) + 1;
			audio.playSequence(wallSound);
		}
		if velX < 0 {
			velX -: 1f64;
		} else {
			velX +: 1f64;
		}
		ball.velX: velX;
		ball.velY: velY;
	}
	if (left <= -100) {
		if velX < 0 {
			ball.velX: (velX * (-1));
		}
	}
	if (top >= windowHeight) {
		if velY > 0 {
			velY: (velY * (-1f64)) - (1f64);
			audio.playSequence(wallSound);
		}
		if velX < 0 {
			velX -: 1f64;
		} else {
			velX +: 1f64;
		}
		ball.velX: velX;
		ball.velY: velY;
	}
	if (right >= (windowWidth + 100)) {
		if velX > 0 {
			ball.velX: (velX * (-1));
		}
		ball.x: left - ((windowWidth + 100) - right);
	}
};

fn checkForGoal (var.@container ball) {
	if goal = false {
		var left: ball.x;
		var right: ball.x + ball.width;
		if (left <= (0 - ball.width)) {
			player2Goal();
		}
		if (right >= (windowWidth + ball.width)) {
			player1Goal();
		}
	}
};

fn player1Goal {
	goal: true;
	app.box2ds[0].bgColor: #F00;
	restoreBallSpeed();
	//$(@root goal).play();

	player1Score +: 1;
	if player1Score >= 6 {
		playerWin();
	} else {
		audio.playSequence(goalSound);
		goalCounterMax: 50;
	}
	var player1ScoreBar: $(player1ScoreBar);
	player1ScoreBar.width: (player1Score => f64) * 30;
	
};
fn player2Goal {
	goal: true;
	app.box2ds[0].bgColor: #00F;
	restoreBallSpeed();
	//$(@root goal).play();

	player2Score +: 1;
	if player2Score >= 6 {
		playerWin();
	} else {
		audio.playSequence(goalSound);
		goalCounterMax: 50;
	}
	var player2ScoreBar: $(player2ScoreBar);
	player2ScoreBar.width: (player2Score => f64) * 30;
};

fn newGame {
	player1Score: 0;
	player2Score: 0;
	goalCounterMax: 150;
	var player1ScoreBar: $(player1ScoreBar);
	player1ScoreBar.width: 0;
	var player2ScoreBar: $(player2ScoreBar);
	player2ScoreBar.width: 0;
}

fn newGameMenu(var.ptr(any) data) {
	newGame();
}

fn playerWin {
	audio.playSequence(winSound);
	newGame();
}

fn restoreBallSpeed {
	var ball: $(ball);
	var velX: ball.velX;
	var velY: ball.velY;
	if velX < 0 {
		velX: -6;
	} else {
		velX: 6;
	}
	if velY < 0 {
		velY: -4;
	} else {
		velY: 4;
	}
	ball.velX: velX;
	ball.velY: velY;
}

fn goalCounterTick {
	if goalCounter < goalCounterMax {
		goalCounter +: 1;
	} else {
		goalCounter: 0;
		app.box2ds[0].bgColor: #3;
		goal: false;
	}
};

fn bounceOnPaddles (var.@container player1; var.@container player2; var.@container ball) {
	var velX: ball.velX;
	if aabbIntersects(player1, ball) {
		if velX < 0 {
			ball.velX: (velX * (-1)) + 1;
			audio.playSequence(paddle1Sound);
		}
	}
	
	if aabbIntersects(player2, ball) {
		if velX > 0 {
			ball.velX: (velX * (-1)) - 1;
			audio.playSequence(paddle2Sound);
		}
	}
};

fn aabbIntersects(var.@container a; var.@container b) => bool {
	var atlx: a.x;
	var atly: a.y + a.height;
	var abrx: a.x + a.width;
	var abry: a.y;
	var btlx: b.x;
	var btly: b.y + b.height;
	var bbrx: b.x + b.width;
	var bbry: b.y;
	
	var.bool cond1: (atlx <= bbrx);
	var.bool cond2: (abrx >= btlx);
	var.bool cond3: (atly >= bbry);
	var.bool cond4: (abry <= btly);
	return cond1 AND cond2 AND cond3 AND cond4;
}

@root {
	width: windowWidth;
	height: windowHeight;
	background: #3;
	
	#new @container player1Score {
		width: 170;
		height: 50;
		background: #0;
		
		x: 100;
		y: 600;
	}
	
	#new @container player1ScoreBar {
		width: 0;
		height: 30;
		background: #6;
		x: 110;
		y: 610;
	}
	
	#new @container player2Score {
		width: 170;
		height: 50;
		background: #0;
		
		x: 900;
		y: 600;
	}
	
	#new @container player2ScoreBar {
		width: 0;
		height: 30;
		background: #6;
		x: 910;
		y: 610;
	}
	
	#new @container player1 {
		width: 40;
		height: 200;
		x: 10;
		y: (windowHeight / 2 ) - 100;
		background: #F;
	}
	#new @container player2 {
		width: 40;
		height: 200;
		x: (windowWidth - 50);
		y: (windowHeight / 2 ) - 100;
		background: #F;
	}
	#new @container ball {
		width: 50;
		height: 50;
		background: #F;
		x: 80;
		y: 400;
		velX: -6;
		velY: 4;
	}

	// #new @sound goal {
	//	 src: "goal.wav";
	// }
}

fn switchGamepads(var.ptr(any) data) {
	if player1Gamepad = 0 {
		player1Gamepad: 1;
		player2Gamepad: 0;
	} else {
		player1Gamepad: 0;
		player2Gamepad: 1;
	}
}

fn toggleSoloMode(var.ptr(any) data) {
	if useSoloMode {
		useSoloMode: false;
	} else {
		useSoloMode: true;
	}
}

@mainMenu {
	#new @menu controller {
		label: "Controller";

		#new @menuItem newGame {
			label: "New game";
			action: pointerTo(newGameMenu);
			shortcut: "n";
		}
		#new @menuItem switchGamepads {
			label: "Switch Gamepads";
			action: pointerTo(switchGamepads);
			shortcut: "t";
		}
		#new @menuItem soloMode {
			label: "Solo mode";
			action: pointerTo(toggleSoloMode);
			shortcut: "s";
		}
	}
}
