#configure {
    name: "Bouncy square";
    //automaticFullScreen: true;
    onUpdateFn: true;
}

const.f64 windowWidth: 1440;
const.f64 windowHeight: 900;

class @level {
    var.i64 delayInput;
    var.f64 maxSpeed;
    var.f64 velX;
    var.f64 velY;
    var.f64 size;
    var.@rgb color;
}

var.f64 maxSpeed: 4; 
var.@rgb levelColor;
var.i64 delayUp: 0;
var.i64 delayLeft: 0;
var.i64 delayDown: 0;
var.i64 delayRight: 0;
var.@level level;

//start game in level1
level1();

fn newGame {
    maxSpeed: level.maxSpeed;
    app.boxPositions[1].x: 720;
    app.boxPositions[1].y: 450;
    app.box2ds[1].width: level.size;
    app.box2ds[1].height: level.size;
    app.boxVelocities[1].x: level.velX;
    app.boxVelocities[1].y: level.velY;
    levelColor: level.color;
};

fn level1 {
    level: @level {
        delayInput: 20;
        maxSpeed: 4;
        velX: 3;
        velY: 2;
        size: 150;
        color: #1EA4CA;
    };
    newGame();
}

fn level2 {
    level: @level {
        delayInput: 16;
        maxSpeed: 30;
        velX: 15;
        velY: 5;
        size: 100;
        color: #FF9300;
    };
    newGame();
}

fn level3 {
    level: @level {
        delayInput: 12;
        maxSpeed: 35;
        velX: 25;
        velY: 15;
        size: 80;
        color: #9194CA;
    };
    newGame();
}

fn level4 {
    level: @level {
        delayInput: 10;
        maxSpeed: 40;
        velX: 35;
        velY: 25;
        size: 60;
        color: #57B676;
    };
    newGame();
}

fn level5 {
    level: @level {
        delayInput: 8;
        maxSpeed: 50;
        velX: 45;
        velY: 35;
        size: 55;
        color: #CDA470;
    };
    newGame();
}

fn level6 {
    level: @level {
        delayInput: 4;
        maxSpeed: 60;
        velX: 50;
        velY: 40;
        size: 50;
        color: #D94F51;
    };
    newGame();
}

@mainMenu {
    #new @menu game {
        label: "Game";
        
        #new @menuItem new {
            label: "New Game";
            shortcut: "n";
            action: pointerTo(newGame) => ptr(fn(ptr(any)));
        }
    }
    
    #new @menu levels {
        label: "Levels";
        
        #new @menuItem level1 {
            label: "Level 1";
            shortcut: "1";
            action: pointerTo(level1) => ptr(fn(ptr(any)));
        }
        
        #new @menuItem level2 {
            label: "Level 2";
            shortcut: "2";
            action: pointerTo(level2) => ptr(fn(ptr(any)));
        }
        
        #new @menuItem level3 {
            label: "Level 3";
            shortcut: "3";
            action: pointerTo(level3) => ptr(fn(ptr(any)));
        }
        
        #new @menuItem level4 {
            label: "Level 4";
            shortcut: "4";
            action: pointerTo(level4) => ptr(fn(ptr(any)));
        }
        #new @menuItem level5 {
            label: "Level 5";
            shortcut: "5";
            action: pointerTo(level5) => ptr(fn(ptr(any)));
        }
        #new @menuItem level6 {
            label: "Level 6";
            shortcut: "6";
            action: pointerTo(level6) => ptr(fn(ptr(any)));
        }
    }
}

//fixme: this should not need to be exported. Also, make it a const
#export { var.[15 x i32] notes }

//fixme: this should be part of the global declaration, not an initializer
notes:
     261i32, //c4
     293i32, //d4
     329i32, //e4
     349i32, //f4
     392i32, //g4
     440i32, //a4
     493i32, //b4
     523i32, //c5
     587i32, //d5
     659i32 //e5
;

fn onUpdate(var.f64 deltaTime) {
    var ball: @container { id: 1 };
    applyUserInput(ball);
    
    bounceOnEdges(ball);
    limitSpeed(ball);
    //fixme: this is a hack
    setSoundFreq(ball);
    LIL__generateSineTone(false);
}

fn setSoundFreq(var.@container ball) {
    var id: ball.id;
    var.i32 ballSpeed: abs(app.boxVelocities[id].x => i32) + abs(app.boxVelocities[id].y => i32);
    loop {
        if ballSpeed >= 10i32 {
            ballSpeed -: 10i32;
            repeat;
        }
    }
    var.i32 freq: notes[ballSpeed];
    if freq = 0i32 {
        freq: 440i32;
    }
    LIL__audioDescriptor.freq: freq;
}

fn applyUserInput (var.@container ball) {
    var id: ball.id;

    //fixme: argument should not be required
    //var gamepad: input.getGamepad();
    var gamepad: input.getGamepad(0);
    
    //W -- up
    // fixme: I'd like this to be:
    // if input.isKeyDown(Keyboard.w) OR input.isKeyDown(Keyboard.upArrow) OR input.isKeyDown(GamePad.up) { }
    // until then, we are using the platform-specific codes for now
    var.bool upIsPressed: false;
    if input.isKeyDown(126i16) { upIsPressed: true }
    if input.isKeyDown(13i16) { upIsPressed: true }
    if gamepad.y > 0.3 { upIsPressed: true }
    if (upIsPressed) {
        if delayUp = 0 {
            app.boxVelocities[id].y +: 1f64;
            delayUp +: 1;
        } else if delayUp < level.delayInput {
            delayUp +: 1;
        } else {
            delayUp: 0;
        }
    } else {
        delayUp: 0;
    }
    //A -- left
    var.bool leftIsPressed: false;
    if input.isKeyDown(123i16) { leftIsPressed: true }
    if input.isKeyDown(0i16) { leftIsPressed: true }
    if gamepad.x < (-0.3f64) { leftIsPressed: true }
    if (leftIsPressed) {
        if delayLeft = 0 {
            app.boxVelocities[id].x -: 1f64;
            delayLeft +: 1;
        } else if delayLeft < level.delayInput {
            delayLeft +: 1;
        } else {
            delayLeft: 0;
        }
    } else {
        delayLeft: 0;
    }
    //S -- down
    var.bool downIsPressed: false;
    if input.isKeyDown(125i16) { downIsPressed: true }
    if input.isKeyDown(1i16) { downIsPressed: true }
    if gamepad.y < (-0.3f64) { downIsPressed: true }
    if (downIsPressed) {
        if delayDown = 0 {
            app.boxVelocities[id].y -: 1f64;
            delayDown +: 1;
        } else if delayDown < level.delayInput {
            delayDown +: 1;
        } else {
            delayDown: 0;
        }
    } else {
        delayDown: 0;
    }
    //D -- right
    var.bool rightIsPressed: false;
    if input.isKeyDown(124i16) { rightIsPressed: true }
    if input.isKeyDown(2i16) { rightIsPressed: true }
    if gamepad.x > 0.3 { rightIsPressed: true }
    if (rightIsPressed) {
        if delayRight = 0 {
            app.boxVelocities[id].x +: 1f64;
            delayRight +: 1;
        } else if delayRight < level.delayInput {
            delayRight +: 1;
        } else {
            delayRight: 0;
        }
    } else {
        delayRight: 0;
    }
}

fn bounceOnEdges (var.@container ball) {
    var top: ball.y + ball.height;
    var bottom: ball.y;
    var left: ball.x;
    var right: ball.x + ball.width;
    // printf(`x %f y %f \n`, ball.x, bottom);
    var velX: ball.velX;
    var velY: ball.velY;
    if (bottom <= 0) {
        if (velY < 0) {
            ball.velY: (velY * (-1));
        }
    }
    if (left <= 0) {
        if velX < 0 {
            ball.velX: (velX * (-1));
        }
    }
    if (top >= windowHeight) {
        if velY > 0 {
            ball.velY: (velY * (-1));
        }
    }
    if (right >= windowWidth) {
        if velX > 0 {
            ball.velX: (velX * (-1));
        }
    }
}

fn limitSpeed (var.@container ball) {
    var velX: ball.velX;
    var velY: ball.velY;
    if velX = 0 {
        if velY = 0 {
            app.box2ds[0].bgColor: #FAC0E3;
        } else {
            app.box2ds[0].bgColor: levelColor;
        }
    } else {
        app.box2ds[0].bgColor: levelColor;
    }
    //fixme: writing -maxSpeed gives problems, so this is an easy solution
    var maxSpeedNeg: 0 - maxSpeed;
    if velX > maxSpeed {
        velX: maxSpeed;
    }
    if velX < maxSpeedNeg {
        velX: maxSpeedNeg;
    }
    if velY > maxSpeed {
        velY: maxSpeed;
    }
    if velY < maxSpeedNeg {
        velY: maxSpeedNeg;
    }
    var.bool hasMaxSpeed: false;
    if velX = maxSpeed {
        hasMaxSpeed: true;
    }
    if velX = maxSpeedNeg {
        hasMaxSpeed: true;
    }
    if velY = maxSpeed {
        hasMaxSpeed: true;
    }
    if velY = maxSpeedNeg {
        hasMaxSpeed: true;
    }
    if hasMaxSpeed {
        app.box2ds[1].bgColor: #FFFF7F;
    } else {
        app.box2ds[1].bgColor: #F;
    }
    ball.velX: velX;
    ball.velY: velY;
}

@root {
    width: windowWidth;
    height: windowHeight;
    
    #new @container test {
        width: 150;
        height: 150;
        x: 720;
        y: 450;
        velX: 3;
        velY: 2;
    }
}
