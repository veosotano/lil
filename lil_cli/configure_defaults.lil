#configure {
    out: #arg { name: "out"; default: null };
    buildPath: "lil_build_tmp";
    printOnly: #arg { name: "print-only"; default: false };
    format: #arg { name: "format"; default: o }; //o, ll or s
    singleFile: #arg { name: "single-file"; default: false };
    isMain: #arg { name: "is-main"; default: true };
    compile: #arg { name: "compile"; default: true };
    link: #arg { name: "link"; default: true };
    run: #arg { name: "run"; default: false };
    isApp: #arg { name: "isApp"; default: auto };
    documentation: false;
    optimize: 1;
    imports: "std/lil.lil";
    linkerFlags: #arg { name: "linker-flags"; default: "-lc" };

    objExt: ".o";
    exeExt: "";

    name: #arg { name: "name"; default: "My App" };

    //set this to the name of the build settings to use
    build: #arg { name: "build"; default: debug };

    //if the target is auto, it will be autodetected
    target: #arg { name: "target"; default: auto };

    builds {
        debug {
            optimize: #arg { name: "optimize"; default: 1 };
            buildPath: #arg { name: "build-path"; default: "lil_build_tmp/debug" };
            constants: "DEBUG_BUILD";
        }

        release {
            optimize: #arg { name: "optimize"; default: 3 };
            buildPath: #arg { name: "build-path"; default: "lil_build_tmp/release" };
            constants: "RELEASE_BUILD";
        }

        docs {
            compile: false;
            documentation: true;
        }
    }
    
    targets {
        windows {
            imports: #arg { name: "os-import-path"; default: "std/windows.lil" };
            suffix: #arg { name: "suffix"; default: "OS_WINDOWS" };
            constants: "OS_WINDOWS";
            objExt: ".obj";
            exeExt: ".exe";
        }
        linux {
            imports: #arg { name: "os-import-path"; default: "std/linux.lil" };
            suffix: #arg { name: "suffix"; default: "OS_LINUX" };
            constants: "OS_LINUX";
        }
        mac {
            imports: #arg { name: "os-import-path"; default: "std/mac.lil" };
            suffix: #arg { name: "suffix"; default: "OS_MAC" };
            constants: "OS_MAC";
            minOSVersion: "10.12";
            linkerFlags: "-macosx_version_min %minOSVersion";
            linkerFlagsApp: "std_lil_mac.o", "-lc", "-framework Cocoa", "-framework CoreVideo", "-framework QuartzCore", "-framework Metal", "-macosx_version_min %minOSVersion";
            appBuildSteps: 'mkdir -p "%name.app/Contents/MacOS"',
                'mkdir -p "%name.app/Contents/Resources"',
                'echo "APPL????" > "%name.app/Contents/PkgInfo"',
                'echo "<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>CFBundleDevelopmentRegion</key>
        <string>English</string>
        <key>CFBundleExecutable</key>
        <string>%name</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundlePackageType</key>
        <string>APPL</string>
        <key>CFBundleSignature</key>
        <string>????</string>
        <key>CFBundleVersion</key>
        <string>1.0</string>
</dict>
</plist>" > "%name.app/Contents/Info.plist"',
                'cp %buildPath/%out "%name.app/Contents/MacOS/%name"'
            ;
        }
        ios {
            imports: #arg { name: "os-import-path"; default: "std/ios.lil" };
            suffix: "OS_IOS";
            constants: "OS_IOS";
        }
        android {
            imports: #arg { name: "os-import-path"; default: "std/android.lil" };
            suffix: "OS_ANDROID";
            constants: "OS_ANDROID";
        }
    }
};
