#snippet samplesPerSecond { #getConfig(audioSamplesPerSecond) };
#snippet bitsPerSample { #getConfig(audioBitsPerSample) };
#snippet bytesPerFrame { #getConfig(audioBytesPerFrame) };
#snippet bufferSeconds { #getConfig(audioBufferSeconds) };
#snippet bufferSize { (#paste samplesPerSecond * #paste bytesPerFrame * #paste bufferSeconds) };
#snippet mixBufferSize { #paste samplesPerSecond * #paste bufferSeconds };
#snippet oscillatorSize { #getConfig(audioOscillatorSize) };
#snippet soundDataSize { #getConfig(soundDataSize) };

#import "cstd.lil";
#needs "string.lil";
#needs "print.lil";
#needs "app.lil";

#snippet M_PI { 3.14159265358979323846264338327950288f32 };
fn NSBeep extern;

const DEBUG: false;
const DEBUG_OSCILLATOR: false;
const DEBUG_OSCILLATOR_DETAIL: false;
const DEBUG_SOUND: false;
const DEBUG_SOUND_DETAIL: false;

#export {
	fn sinf(var.f32 value) => f32 extern;

	fn LIL__beep {
		NSBeep();
	};

	class @AudioComponentInstance { };

	class @audioDescriptor {
		var.ptr(@AudioComponentInstance) audioUnit;
		var.i64 bufferSize;
		var.ptr(i8) data;
		var.i32 bitsPerSample;
		var.i32 bytesPerFrame;
		var.i32 samplesPerSecond;
	};

	var.@audioDescriptor LIL__audioDescriptor;

	fn LIL__audioInit => ptr(@audioDescriptor) {
		//puts `audio init`;
		LIL__audioDescriptor: @audioDescriptor {
			samplesPerSecond: #paste samplesPerSecond;
			bitsPerSample: #paste bitsPerSample;
			bytesPerFrame: #paste bytesPerFrame;
			bufferSize: #paste bufferSize;
			data: malloc(#paste bufferSize);
		};
		return pointerTo LIL__audioDescriptor;
	};
	
	fn LIL__audioFree {
		free(LIL__audioDescriptor.data);
	}

	class @oscillator {
		var.[#paste bufferSize x i8] buffer: [];
		var.i64 playCursor: 0;
		var.i32 freq: 0;
		var.f32 volume: 1.0;
		var.i64 sampleIndex: 0;
		var.f32 sineValue: 0f32;
		var.bool fadeIn: true;
		var.bool fadeOut: false;
		var.bool isPlaying: false;
		var.bool hasSamples: false;

		fn play {
			@self.isPlaying: true;
		}

		fn playFreq(var.i32 value) {
			@self.freq: value;
			@self.play();
		}
		
		fn stop {
			if !@self.fadeOut AND !@self.fadeIn {
				@self.fadeOut: true;
			}
		}

		fn update {
			if @self.isPlaying {
				@self.generateSineTone();
				@self.hasSamples: true;

			} else {
				@self.hasSamples: false;
			}
		}

		fn generateSineTone {
			#if DEBUG_OSCILLATOR {
				printf(`//////////////////////////////////////\n`);
			}
			var.i32 freq: @self.freq;
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`freq: %i\n`, freq);
			}
			var.i32 period: #paste samplesPerSecond / freq;
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`period: %i\n`, period);
			}
			var.i32 latencySampleCount: #paste samplesPerSecond / 15i32;
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`latencySampleCount: %i\n`, latencySampleCount);
			}
			var.i32 targetQueueBytes: latencySampleCount * #paste bytesPerFrame;
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`targetQueueBytes: %i\n`, targetQueueBytes);
				printf(`playCursor: %li\n`, @self.playCursor);
			}
			var.i64 targetCursor: ((@self.playCursor + (targetQueueBytes => i64)) MOD (#paste bufferSize => i64));
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`targetCursor: %i\n`, targetCursor);
				printf(`sampleIndex: %li\n`, @self.sampleIndex);
			}
			var.i64 writeCursor: ((@self.sampleIndex * (#paste bytesPerFrame => i64)) MOD (#paste bufferSize => i64));
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`writeCursor: %i\n`, writeCursor);
			}
			var.i64 bytesToWrite: 0;

			if (writeCursor > targetCursor) {
				bytesToWrite: (#paste bufferSize => i64) - writeCursor;
				bytesToWrite +: targetCursor;
			} else {
				bytesToWrite: targetCursor - writeCursor;
			}
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`bytesToWrite: %i\n`, bytesToWrite);
			}

			var bufPtr: pointerTo(@self.buffer) => ptr(i8);
			var.ptr(i8) region1Ptr: bufPtr + writeCursor;
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`region1Ptr: %li\n`, region1Ptr => i64);
			}
			var.i64 region1Size: bytesToWrite;
			if ((region1Size + writeCursor) > (#paste bufferSize => i64)) {
				region1Size: (#paste bufferSize => i64) - writeCursor;
			}
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`region1Size: %i\n`, region1Size);
			}

			var.ptr(i8) region2Ptr: bufPtr;
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`region2Ptr: %li\n`, region2Ptr => i64);
			}
			var.i64 region2Size: bytesToWrite - region1Size;
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`region2Size %i\n`, region2Size);
			}

			var.i64 region1SampleCount: region1Size / (#paste bytesPerFrame => i64);
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`region1SampleCount: %i\n`, region1SampleCount);
			}
			var.ptr(i16) channel: region1Ptr => ptr(i16);
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`channel: %li\n`, ((channel => i64) - (bufPtr => i64)));
			}

			var.i64 region2SampleCount: region2Size / (#paste bytesPerFrame => i64);
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`region2SampleCount: %i\n`, region2SampleCount);
			}

			for (var.i64 i: 0; i < region1SampleCount; i +: 1) {
				var.f32 sineValue: sinf(@self.sineValue);
				var.i16 sampleValue: (sineValue * (3200f32 * @self.volume)) => i16;
				
				//left channel
				set(channel, sampleValue);
				channel: channel + 1;
				//right channel
				set(channel, sampleValue);
				channel: channel + 1;
				@self.sineValue +: (2.0f32 * #paste M_PI) / (period => f32);
				if (@self.sineValue > (2.0f32 * #paste M_PI)) {
					@self.sineValue -: (2.0f32 * #paste M_PI);
				}
				@self.sampleIndex +: 1;
			}

			channel: region2Ptr => ptr(i16);
			#if DEBUG_OSCILLATOR_DETAIL {
				printf(`channel: %li\n`, channel => i64);
			}

			for (var.i64 i: 0; i < region2SampleCount; i +: 1) {
				var.f32 sineValue: sinf(@self.sineValue);
				var.i16 sampleValue: (sineValue * (3200f32 * @self.volume)) => i16;

				//left channel
				set(channel, sampleValue);
				channel: channel + 1;
				//right channel
				set(channel, sampleValue);
				channel: channel + 1;
				@self.sineValue +: (2.0f32 * #paste M_PI) / (period => f32);
				if (@self.sineValue > (2.0f32 * #paste M_PI)) {
					@self.sineValue -: (2.0f32 * #paste M_PI);
				}
				@self.sampleIndex +: 1;
			}
		}
	}

	class @soundData {
		var.i64 id: 0;
		var.bool isPlaying: false;
	}

	class @soundPlayback {
		var.i64 id: 0;
		var.i64 playCursor: 0;
		var.f32 volume: 1.0;
		var.f32 pitch: 1.0;
		var.ptr(@soundPlayback)|null next: null;
	}
	
	class @audio {
		var.[#paste mixBufferSize x f32] mixBuffer: [];
		var.[#paste oscillatorSize x @oscillator] oscillators: [];
		var.[#paste soundDataSize x @soundData] soundData: [];
		var.i64 soundDataCount: 0;
		var.[#paste soundDataSize x ptr(i8)] soundBuffers: [];
		var.[#paste soundDataSize x i64] soundBufferSizes: [];
		var.ptr(@soundPlayback)|null playbackHead: null;
		var.f32 gain: 1.0;

		fn construct {
			#if DEBUG_OSCILLATOR {
				printf(`constructing oscillators\n`);
			}
			for #paste oscillatorSize {
				@self.oscillators[@value]: @oscillator { };
			}
		}
		
		fn clear(var.i32 frames) {
			var.i32 bytesToOutput: frames * (sizeOf(type f32) => i32);
			var.i32 sampleCount: bytesToOutput / (sizeOf(type f32) => i32);
			var.ptr(f32) channel: pointerTo(@self.mixBuffer) => ptr(f32);

			for (var.i64 i: 0; i < sampleCount; i +: 1) {
				//left channel
				set(channel, 0f32);
				channel: channel + 1;
				//right channel
				set(channel, 0f32);
				channel: channel + 1;
			}
		}

		fn update(var.i32 frames) {
			var.i32 bytesToOutput: frames * #paste bytesPerFrame;
			//generate
			for #paste oscillatorSize {
				var osc: pointerTo(@self.oscillators[@value]);
				osc.update();
			}

			//mix
			for #paste oscillatorSize {
				var osc: pointerTo(@self.oscillators[@value]);
				if osc.hasSamples {
					var oscRegion1Ptr: (pointerTo(osc.buffer) => ptr(i8)) + osc.playCursor;
					var oscRegion2Ptr: pointerTo(osc.buffer) => ptr(i8);

					var.i32 region1Size: bytesToOutput;
					var.i32 region2Size: 0;
					if (osc.playCursor + (bytesToOutput => i64)) > (#paste bufferSize => i64) {
						region1Size: ((#paste bufferSize => i64) - osc.playCursor) => i32;
						region2Size: bytesToOutput - region1Size;
					}

					var.i64 region1SampleCount: region1Size / (#paste bytesPerFrame => i64);
					var.ptr(f32) channel: pointerTo(@self.mixBuffer[0]);
					var.ptr(i16) oscChannel: oscRegion1Ptr => ptr(i16);
					var.i64 region2SampleCount: region2Size / (#paste bytesPerFrame => i64);
					
					
					var.i64 fadeInSamples: 300;
					var.i64 fadeInSamplesRegion1: 0;
					var.i64 fadeInSamplesRegion2: 0;
					if osc.fadeIn {
						if region2SampleCount >= fadeInSamples {
							fadeInSamplesRegion2: fadeInSamples;
						} else if region2SampleCount > 0 {
							fadeInSamplesRegion2: region2SampleCount;
							fadeInSamplesRegion1: fadeInSamples - fadeInSamplesRegion2;
						} else {
							fadeInSamplesRegion1: fadeInSamples;
						}
					}

					var.i64 fadeOutSamples: 300;
					var.i64 fadeOutSamplesRegion1: 0;
					var.i64 fadeOutSamplesRegion2: 0;
					if osc.fadeOut {
						if region2SampleCount >= fadeOutSamples {
							fadeOutSamplesRegion2: fadeOutSamples;
						} else if region2SampleCount > 0 {
							fadeOutSamplesRegion2: region2SampleCount;
							fadeOutSamplesRegion1: fadeOutSamples - fadeOutSamplesRegion2;
						} else {
							fadeOutSamplesRegion1: fadeOutSamples;
						}
					}

					for (var.i64 i: 0; i < region1SampleCount; i +: 1) {
						//left channel
						var currentSampleL: valueOf channel;
						var oscSampleL: valueOf(oscChannel + (i * 2));

						if osc.fadeIn AND (fadeInSamplesRegion1 > 0) {
							if i <= fadeInSamplesRegion1 {
								var.f32 fadeAmount: ((i => f32) / fadeInSamplesRegion1);
								oscSampleL: ((oscSampleL => f32 ) * fadeAmount) => i16;
							}
						}
						if osc.fadeOut AND (fadeOutSamplesRegion1 > 0) {
							var.i64 fadeStartSample: region1SampleCount - fadeOutSamplesRegion1;
							if i >= fadeStartSample {
								var.f32 fadeAmount: (((region1SampleCount - i) => f32) / fadeOutSamplesRegion1);
								oscSampleL: ((oscSampleL => f32 ) * fadeAmount) => i16;
							}
						}

						set(channel, currentSampleL + (oscSampleL => f32));
						channel: channel + 1;
						//right channel
						var currentSampleR: valueOf channel;
						var oscSampleR: valueOf(oscChannel + (i * 2) + 1);

						if osc.fadeIn AND (fadeInSamplesRegion1 > 0) {
							if i <= fadeInSamplesRegion1 {
								var.f32 fadeAmount: ((i => f32) / fadeInSamplesRegion1);
								oscSampleR: ((oscSampleR => f32 ) * fadeAmount) => i16;
							}
						}
						if osc.fadeOut AND (fadeOutSamplesRegion1 > 0) {
							var.i64 fadeStartSample: region1SampleCount - fadeOutSamplesRegion1;
							if i >= fadeStartSample {
								var.f32 fadeAmount: (((region1SampleCount - i) => f32) / fadeOutSamplesRegion1);
								oscSampleR: ((oscSampleR => f32 ) * fadeAmount) => i16;
							}
						}

						set(channel, currentSampleR + (oscSampleR => f32));
						channel: channel + 1;
					}

					oscChannel: oscRegion2Ptr => ptr(i16);
					for (var.i64 i: 0; i < region2SampleCount; i +: 1) {
						//left channel
						var currentSampleL: valueOf channel;
						var oscSampleL: valueOf(oscChannel + (i * 2));

						if osc.fadeIn AND (fadeInSamplesRegion2 > 0) {
							if i <= fadeInSamplesRegion2 {
								var.f32 fadeAmount: ((i => f32) / fadeInSamplesRegion2);
								oscSampleL: ((oscSampleL => f32 ) * fadeAmount) => i16;
							}
						}
						if osc.fadeOut AND (fadeOutSamplesRegion2 > 0) {
							var.i64 fadeStartSample: region2SampleCount - fadeOutSamplesRegion2;
							if i >= fadeStartSample {
								var.f32 fadeAmount: (((region2SampleCount - i) => f32) / fadeOutSamplesRegion2);
								oscSampleL: ((oscSampleL => f32 ) * fadeAmount) => i16;
							}
						}

						set(channel, currentSampleL + (oscSampleL => f32));
						channel: channel + 1;
						//right channel
						var currentSampleR: valueOf channel;
						var oscSampleR: valueOf(oscChannel + (i * 2) + 1);

						if osc.fadeIn AND (fadeInSamplesRegion2 > 0) {
							if i <= fadeInSamplesRegion2 {
								var.f32 fadeAmount: ((i => f32) / fadeInSamplesRegion2);
								oscSampleR: ((oscSampleR => f32 ) * fadeAmount) => i16;
							}
						}
						if osc.fadeOut AND (fadeOutSamplesRegion2 > 0) {
							var.i64 fadeStartSample: region2SampleCount - fadeOutSamplesRegion2;
							if i >= fadeStartSample {
								var.f32 fadeAmount: (((region2SampleCount - i) => f32) / fadeOutSamplesRegion2);
								oscSampleR: ((oscSampleR => f32 ) * fadeAmount) => i16;
							}
						}

						set(channel, currentSampleR + (oscSampleR => f32));
						channel: channel + 1;
					}
					
					osc.playCursor: (osc.playCursor + (bytesToOutput => i64)) MOD (#paste bufferSize => i64);
					if osc.fadeOut {
						//we're done with the fade out, stop playing
						osc.isPlaying: false;
						osc.fadeOut: false;
						//next time we play we need to fade in again
						osc.fadeIn: true;
					}
					else if osc.fadeIn
					{
						osc.fadeIn: false;
					}
				}
			}

			//mix sound effects
			var.ptr(@soundPlayback)|null previousPlayback: null;
			for (var playback: audio.playbackHead; playback != null;) {
				if playback => ptr(@soundPlayback) {
					#if DEBUG_SOUND_DETAIL {
						printf(`sound buffer size: %li\n`, audio.soundBufferSizes[playback.id]);
						printf(`play cursor: %li\n`, playback.playCursor);
					}

					var.i64 remainingBytes: bytesToOutput => i64;
					if (playback.playCursor + bytesToOutput) >= audio.soundBufferSizes[playback.id] {
						remainingBytes: audio.soundBufferSizes[playback.id] - playback.playCursor;
					}
					#if DEBUG_SOUND_DETAIL {
						printf(`bytes to output: %i\n`, bytesToOutput);
						printf(`remaining bytes: %li\n`, remainingBytes);
					}

					var.ptr(i8) buffer: audio.soundBuffers[playback.id];

					var.ptr(f32) channel: pointerTo(@self.mixBuffer[0]);
					var.ptr(i16) playbackChannel: (buffer + playback.playCursor) => ptr(i16);
					var.i64 sampleCount: remainingBytes / (#paste bytesPerFrame => i64);

					#if DEBUG_SOUND_DETAIL {
						printf(`sample count: %li\n`, sampleCount);
					}

					for (var.i64 i: 0; i < sampleCount; i +: 1) {
						//left channel
						var currentSampleL: valueOf channel;
						var playbackSampleL: valueOf(playbackChannel + (i * 2));

						set(channel, currentSampleL + (playbackSampleL => f32));
						channel: channel + 1;
						//right channel
						var currentSampleR: valueOf channel;
						var playbackSampleR: valueOf(playbackChannel + (i * 2) + 1);

						set(channel, currentSampleR + (playbackSampleR => f32));
						channel: channel + 1;
					}

					playback.playCursor: playback.playCursor + (remainingBytes => i64);
					if playback.playCursor >= audio.soundBufferSizes[playback.id] {
						audio.removePlayback(playback, previousPlayback);
						if previousPlayback => ptr(@soundPlayback) {
							playback: previousPlayback.next;
						} else {
							playback: null;
						}

					} else {
						previousPlayback: playback;
						playback: playback.next;
					}
					
				}
			}
		}

		fn output(var.i32 frames; var.ptr(i8) dstBuffer) {
			var.i32 bytesToRead: frames * (sizeOf(type f32) => i32);
			var.i32 sampleCount: bytesToRead / (sizeOf(type f32) => i32);

			var.ptr(i16) channel: dstBuffer => ptr(i16);
			for (var.i64 i: 0; i < sampleCount; i +: 1) {
				//left channel
				var srcSampleL: valueOf((pointerTo(@self.mixBuffer) => ptr(f32)) + (i * 2));
				set(channel, (srcSampleL * @self.gain)=> i16);
				channel: channel + 1;
				//right channel
				var srcSampleR: valueOf((pointerTo(@self.mixBuffer) => ptr(f32)) + (i * 2) + 1);
				set(channel, (srcSampleR * @self.gain) => i16);
				channel: channel + 1;
			}
		}
		
		fn newPlayback(var.i64 soundId) {
			#if DEBUG_SOUND {
				printf(`newPlayback with id %li\n`, soundId);
			}
			var.ptr(@soundPlayback) newPlayback: malloc(sizeOf(type @soundPlayback));
			//fixme: I'd like to initialize this with newPlayback: @soundPlayback { };
			newPlayback.id: soundId;
			newPlayback.playCursor: 0;
			newPlayback.volume: 1.0;
			newPlayback.pitch: 1.0;
			newPlayback.next: null;
			@self.addPlayback(newPlayback);
		}
		
		fn addPlayback(var.ptr(@soundPlayback) value) {
			#if DEBUG_SOUND {
				printf(`setting new playhead\n`);
			}
			value.next: @self.playbackHead;
			@self.playbackHead: value;
		}
		
		fn removePlayback(var.ptr(@soundPlayback) value; var.ptr(@soundPlayback)|null previousPlayback) {
			#if DEBUG_SOUND {
				printf(`remove playback id %li\n`, value.id);
			}
			if previousPlayback => ptr(@soundPlayback) {
				previousPlayback.next: value.next;
			} else {
				audio.playbackHead: value.next;
			}
			free(value);
		}
	}
	
	var.@audio audio: @audio { };
	
	fn LIL__audioAllocSoundBuffer(var.i64 sizeInBytes; var.i64 idx) => ptr(i8) {
		audio.soundBuffers[idx]: calloc(sizeInBytes, 1);
		audio.soundBufferSizes[idx]: sizeInBytes;
		return audio.soundBuffers[idx];
	}
	
	fn LIL__audiofreeSoundBuffer(var.i64 idx) {
		free(audio.soundBuffers[idx]);
	}
	
	fn LIL__audioUpdate(var.i32 frames, var.ptr(i8) dstBuffer) {
		audio.clear(frames);
		audio.update(frames);
		audio.output(frames, dstBuffer);
	}

	class @sound {
		//this class MUST only be an i64
		//do not add any more vars
		#expand var.@element super: @element { };

		//public interface
		vvar.i64 componentId;
		vvar.bool isPlaying;
		//fixme: should be =>cstr
		#resource vvar.ptr(@string)=>ptr(i8) src;

		fn getComponentId => i64 {
			return app.selectables[@self.id].componentId;
		}

		fn setIsPlaying(var.bool value) {
			audio.soundData[@self.componentId].isPlaying: value;
		}
		fn getIsPlaying => bool {
			return audio.soundData[@self.componentId].isPlaying;
		}

		fn initialize(var.cstr name; var.i64 parentId: 0) => i64 {
			#if DEBUG_SOUND {
				printf(`created sound object\n`);
			}
			var componentId: audio.soundDataCount;
			audio.soundDataCount +: 1;
			@self.id: app.newElement(name, parentId, 7, componentId);
			audio.soundData[componentId].id: @self.id;
			return @self.id;
		}

		//WARNING: only call this when it is the last entity
		fn deinit {
			app.removeLastEntity();
			var resourceId: app.selectables[@self.id].resourceId;
			if resourceId >= 0 {
				app.removeLastResource();
			}
		}
		
		fn play {
			#if DEBUG_SOUND {
				printf(`Play sound\n`);
			}
			audio.newPlayback(@self.componentId);
		}
		
		fn getSrc() => cstr {
			var resourceId: app.selectables[@self.id].resourceId;
			return pointerTo(app.resources[resourceId].path) => ptr(i8);
		}
		fn setSrc(var.ptr(@string) value) {
			var resourceId: app.selectables[@self.id].resourceId;
			if resourceId < 0 {
				resourceId: app.newResource();
				app.selectables[@self.id].resourceId: resourceId;
				app.resources[resourceId].typeId: ResourceType.sound;
			}
			memcpy(@self.src, value.cstr(), value.length);
		}
	}
}
