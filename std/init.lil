#export {
    
    #if #getConfig(isApp) {
        //this function is generated by the compiler
        fn LIL__applyRules extern;
        
        //defined in the os specific std lib
        fn LIL__run() extern;

        fn LIL__init
        {
            //create root element
            var root: @container { };
            var id: root.initialize(name: `@root`; parentId: 0);
            
            //this function is generated by the compiler
            LIL__applyRules();

			//the app global is defined in std/app.lil
            app.initialize();

            #paste LIL_INITIALIZERS;
        }
        
        fn LIL__addAppMenu {
            #paste LIL_ADD_APP_MENU_ITEMS;
        }

        fn LIL__addMenus {
            #paste LIL_ADD_MAIN_MENU_ITEMS;
            // it will end up looking something like this:
            // LIL__addMenu(`File`);
            // LIL__addMenuItem(`Test`, `t`, pointerTo(testMenuItemHandler));
        }
        
        fn LIL__getWindowSize => @size {
            //fixme: should use selection system to get id instead of hardcoded to 0
            //fixme: upcast should be implicit
            return @size {
                width: app.box2ds[0].width => f64;
                height: app.box2ds[0].height => f64;
            };
        }

        #if #getConfig(autoMainFn) {
            fn main(var.i32 argc; var.ptr(cstr) argv) {
                LIL__run();
                return 0;
            }
        }

    } else {
        fn LIL__init
        {
            #paste LIL_INITIALIZERS;
        }
        #if #getConfig(autoMainFn) {
            fn main {
                LIL__init();
                return 0;
            }
        }
    }
}
