#export {
    
    #if #getConfig(isApp) {
        //this function is generated by the compiler
        fn LIL__applyRules extern;
        
        //defined in the os specific std lib
        fn LIL__run() extern;

        //defined in std/app.lil
        var.@app app extern;

        //fixme: remove this once global initializers work
        var.[4 x @HIDVendorPair] HIDVendorsTable extern;
        var.[20 x @HIDProductPair] HIDProductsTable extern;

        //defined in std/os.lil
        fn LIL__setWindowBgColor(var.f32 red; var.f32 green; var.f32 blue; var.f32 alpha) extern;

        fn LIL__init
        {
            //set up app object
            //remove this once global initializers have been implemented
            app: @app { selectables: []; entityCount: 0; };
            
            //install default entity types
            //0: @container
            //1: @image
            //2: @video
            app.typeCount: 3;

            //create root element
            var root: @container { };
            var id: root.initialize(name: `@root`; parentId: 0);
            
            //this function is generated by the compiler
            LIL__applyRules();

            //get root's background color
            var bgColor: app.box2ds[id].bgColor;
            LIL__setWindowBgColor(bgColor.red, bgColor.green, bgColor.blue, bgColor.alpha);
            
            //initialize gamepad data
            //fixme: this should be initializers on the globals in input.lil, it should not be in this file
            HIDVendorsTable:
                @HIDVendorPair { name: `Unknown`; id: 0 },
                @HIDVendorPair { name: `Sony`; id: 1356 },
                @HIDVendorPair { name: `Microsoft`; id: 1118 },
                @HIDVendorPair { name: `Logitech`; id: 1133 }
            ;
            HIDProductsTable:
                //generic
                @HIDProductPair { name: `Controller`; id: 0; vendorId: 0 },

                //sony
                @HIDProductPair { name: `DualShock 4`; id: 1476; vendorId: 1356 },
                @HIDProductPair { name: `DualSense 5`; id: 3302; vendorId: 1356 },
        
                //microsoft
                @HIDProductPair { name: `Xbox360 Controller`; id: 654; vendorId: 1118 },
                @HIDProductPair { name: `Xbox360 Wireless Controller`; id: 655; vendorId: 1118 },
                @HIDProductPair { name: `Xbox One Controller`; id: 721; vendorId: 1118 },
                @HIDProductPair { name: `Xbox One Controller (Firmware 2015)`; id: 733; vendorId: 1118 },
                @HIDProductPair { name: `Xbox One Elite Controller`; id: 739; vendorId: 1118 },
                @HIDProductPair { name: `Xbox One S Controller`; id: 746; vendorId: 1118 },
                @HIDProductPair { name: `Xbox One S Controller [Bluetooth]`; id: 765; vendorId: 1118 },
                @HIDProductPair { name: `Xbox Wireless Controller`; id: 2834; vendorId: 1118 },
        
                //logitech
                @HIDProductPair { name: `WingMan Gamepad Extreme`; id: 49672; vendorId: 1133 },
                @HIDProductPair { name: `WingMan Gamepad`; id: 49673; vendorId: 1133 },
                @HIDProductPair { name: `F310 Gamepad [DirectInput Mode]`; id: 49686; vendorId: 1133 },
                @HIDProductPair { name: `F510 Gamepad [DirectInput Mode]`; id: 49688; vendorId: 1133 },
                @HIDProductPair { name: `F710 Wireless Gamepad [DirectInput Mode]`; id: 49689; vendorId: 1133 },
                @HIDProductPair { name: `F310 Gamepad [XInput Mode]`; id: 49693; vendorId: 1133 },
                @HIDProductPair { name: `F510 Gamepad [XInput Mode]`; id: 49694; vendorId: 1133 },
                @HIDProductPair { name: `F710 Wireless Gamepad [XInput Mode]`; id: 49695; vendorId: 1133 }
            ;

            #paste LIL_INITIALIZERS;
        }
        
        fn LIL__addAppMenu {
            #paste LIL_ADD_APP_MENU_ITEMS;
        }

        fn LIL__addMenus {
            #paste LIL_ADD_MAIN_MENU_ITEMS;
            // it will end up looking something like this:
            // LIL__addMenu(`File`);
            // LIL__addMenuItem(`Test`, `t`, pointerTo(testMenuItemHandler));
        }
        
        fn LIL__getWindowSize => @size {
            //fixme: should use selection system to get id instead of hardcoded to 0
            //fixme: upcast should be implicit
            return @size {
                width: app.box2ds[0].width => f64;
                height: app.box2ds[0].height => f64;
            };
        }

        #if #getConfig(autoMainFn) {
            fn main(var.i32 argc; var.ptr(cstr) argv) {
                LIL__run();
                return 0;
            }
        }

    } else {
        fn LIL__init
        {
            #paste LIL_INITIALIZERS;
        }
        #if #getConfig(autoMainFn) {
            fn main {
                LIL__init();
                return 0;
            }
        }
    }
}
