#===== class @image ========
#= An image is a box with a texture.
#= href https://github.com/veosotano/lil/blob/main/std/app.lil
#---------------------------
<lil>#new @image logo {
	src: "logo.png";
	x: 20;
	y: 10;
}</lil>


#===== var super ===========
#= The @element superclass. This field is expanded and gives this class its id field.
#---------------------------
<lil>var elem: @self.super;</lil>

#===== vvar componentId ===========
#= The identifier of the data for this image.
#---------------------------
<lil>app.imgs[@self.componentId].width: value;</lil>

#===== vvar width ===========
#= How wide the image is.
#---------------------------
<lil>theImage.width: 100;</lil>

#===== vvar height ===========
#= How tall the image is.
#---------------------------
<lil>var height: theImage.height;</lil>

#===== vvar x ===========
#= The position along the horizontal axis.
#---------------------------
<lil>theImage.x +: 100;</lil>

#===== vvar y ===========
#= The position along the vertical axis.
#---------------------------
<lil>theImage.y -: 20;</lil>

#===== vvar z ===========
#= The position along the direction of the depth.
#---------------------------
<lil>theImage.z: 0;</lil>

#===== vvar velX ==============
#= The speed at which this container should move along the horizontal axis, in pixels per 60th of a second.
#---------------------------
<lil>theImage.velX: 3;</lil>

#===== vvar velY ==============
#= The speed at which this container should move along the vertical axis, in pixels per 60th of a second.
#---------------------------
<lil>theImage.velY: 5;</lil>

#===== vvar velZ ==============
#= The speed at which this container should move along the direction of the depth, in pixels per 60th of a second.
#---------------------------
<lil>theImage.velZ: 0;</lil>

#===== vvar src ===========
#= A string containing the file path for the resource. Returns the string as a cstr.
#---------------------------
<lil>theImage.src: "sprite.png";</lil>

#===== fn getComponentId =============
#= Accessor for the componentId vvar.
#---------------------------
<lil>var componentId: @self.getComponentId();</lil>

#===== fn initialize =============
#= This method installs a new image into the ECS.
#===== var name ============
#= The name of the new image.
#===== var parentId ========
#= The id of the parent of the new image. Defaults to 0, which is the id of the @root object.
#---------------------------
<lil>var theImage: @image { };
theImage.initialize(`myImage`, 0);</lil>

#===== fn deinit =======
#= Removes the last img, entity, and resource, and unloads the texture. Only call this when it is the last entity.
#---------------------------
<lil>theImage.deinit();</lil>

#===== fn setWidth =============
#= Setter for the width vvar.
#===== var value ===========
#= The number in pixels for the width.
#---------------------------
<lil>theImage.setWidth(100);</lil>

#===== fn getWidth =============
#= Getter for the width vvar.
#---------------------------
<lil>if theImage.getWidth() > 200 {
	//etc
}</lil>

#===== fn getWidthFinal ========
#= Returns either the width value or the width of the texture.
#---------------------------
<lil>var usedWidth: theImage.getWidthFinal();</lil>

#===== fn setHeight =============
#= Setter for the height vvar.
#===== var value ===========
#= The number in pixels for the height.
#---------------------------
<lil>theImage.setHeight(200);</lil>

#===== fn getHeight =============
#= Getter for the height vvar.
#---------------------------
<lil>print theImage.getHeight();</lil>

#===== fn getHeightFinal ========
#= Returns either the height value or the height of the texture.
#---------------------------
<lil>var usedHeight: theImage.getHeightFinal();</lil>

#===== fn setX =============
#= Setter for the x vvar.
#===== var value ===========
#= The number in pixels for the x coordinate.
#---------------------------
<lil>theImage.setX(200);</lil>

#===== fn getX =============
#= Getter for the x vvar.
#---------------------------
<lil>if theImage.getX() > 100 {
	//etc
}</lil>

#===== fn setY =============
#= Setter for the y vvar.
#===== var value ===========
#= The number in pixels for the y coordinate.
#---------------------------
<lil>theImage.setY(0);</lil>

#===== fn getY =============
#= Getter for the y vvar.
#---------------------------
<lil>var currentY: theImage.getY();</lil>

#===== fn setZ =============
#= Setter for the z vvar.
#===== var value ===========
#= The number in pixels for the z coordinate.
#---------------------------
<lil>theImage.setZ(0);</lil>

#===== fn getZ =============
#= Getter for the z vvar.
#---------------------------
<lil>if theImage.getZ() > 0 {
	//etc
}</lil>

#===== fn setVelX ==========
#= Setter for the velX vvar.
#===== var value ===========
#= The number in pixels for the velocity along the horizontal axis.
#---------------------------
<lil>theImage.setVelX(3);</lil>

#===== fn getVelX ==========
#= Getter for the velX vvar.
#---------------------------
<lil>if theImage.getVelX() > 100 {
	//etc
}</lil>

#===== fn setVelY ==========
#= Setter for the velY vvar.
#===== var value ===========
#= The number in pixels for the velocity along the vertical axis.
#---------------------------
<lil>theImage.setVelY(0);</lil>

#===== fn getVelY ==========
#= Getter for the velY vvar.
#---------------------------
<lil>var currentY: theImage.getVelY();</lil>

#===== fn setVelZ ==========
#= Setter for the velZ vvar.
#===== var value ===========
#= The number in pixels for the velocity in the direction of the depth.
#---------------------------
<lil>theImage.setVelZ(0);</lil>

#===== fn getVelZ ==========
#= Getter for the velZ vvar.
#---------------------------
<lil>if theImage.getVelZ() > 0 {
	//etc
}
</lil>

#===== fn setSrc =============
#= Setter for the src vvar.
#===== var value ===========
#= A string containing the path to the image inside the Resources folder.
#---------------------------
<lil>theImage.setSrc("newImage.png");</lil>

#===== fn getSrc =============
#= Getter for the src vvar.
#---------------------------
<lil>print theImage.getSrc();</lil>

#===== fn load =============
#= Loads a new image into the system, creating the new texture.
#===== var value ===========
#= A string containing the path to the image inside the Resources folder.
#---------------------------
<lil>myImage.load("someFile.png");</lil>
