#export {
    
    #if #getConfig(isApp) {
        //this function is generated by the compiler
        fn LIL__applyRules extern;
        
        //defined in the os specific std lib
        fn LIL__run(f32, f32) extern;

        //defined in std/app.lil
        var.@app app extern;

        //defined in std/os.lil
        fn LIL__setWindowBgColor(var.f32 red; var.f32 green; var.f32 blue; var.f32 alpha) extern;

        fn LIL__init
        {
            //get root's background color
            var bgColor: app.box2ds[0].bgColor;
            //LIL__setWindowBgColor(bgColor.red, bgColor.green, bgColor.blue, bgColor.alpha);

            #paste LIL_INITIALIZERS;
        }

        fn main {
            //set up app object
            //remove this once global initializers have been implemented
            app: @app { selectables: []; entityCount: 0; };
            
            //install default entity types
            //0: @container
            //1: @image
            //2: @video
            app.typeCount: 3;

            //create root element
            var id: LIL__newContainer(`@root`, 0);
            
            //this function is generated by the compiler
            //fixme: remove this once setupRules works
            var testId: LIL__newContainer(`test`, id);
            //---------
            LIL__applyRules();

            var rootBox: app.box2ds[id];
            LIL__run(rootBox.width, rootBox.height);
            return 0;
        }
        
        fn LIL__addAppMenu {
            #paste LIL_ADD_APP_MENU_ITEMS;
        }

        fn LIL__addMenus {
            #paste LIL_ADD_MAIN_MENU_ITEMS;
            // it will end up looking something like this:
            // LIL__addMenu(`File`);
            // LIL__addMenuItem(`Test`, `t`, pointerTo(testMenuItemHandler));
        }

    } else {
        fn main {
            #paste LIL_INITIALIZERS;
            return 0;
        }
    }
}
