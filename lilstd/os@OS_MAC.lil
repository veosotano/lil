alias cstr => ptr(i8);
var.id LIL__applicationDelegate extern;

#export {
    #import "objc.lil";

    fn LIL__addMenu(var.cstr label) {
        var.SEL addMenuSel: sel_registerName(`addMenu:`);
        objc_msgSend(LIL__applicationDelegate, addMenuSel, label);
    }

    fn LIL__addMenuItem(var.cstr label; var.cstr shortcut; var.ptr(fn) fnPtr) {
        var.SEL addItemSel: sel_registerName(`addMenuItem:key:fnPtr:`);
        objc_msgSend(LIL__applicationDelegate, addItemSel, label, shortcut, fnPtr);
    }

    fn LIL__addMenuSeparator {
        var.SEL addSeparatorSel: sel_registerName(`addMenuSeparator`);
        objc_msgSend(LIL__applicationDelegate, addSeparatorSel);
    }

    fn LIL__exitMenu {
        var.SEL exitSel: sel_registerName(`exitMenu`);
        objc_msgSend(LIL__applicationDelegate, exitSel);
    }
    
    fn LIL__setWindowBgColor(var.f32 red; var.f32 green; var.f32 blue; var.f32 alpha) {
        var.SEL selector: sel_registerName(`setWindowBackgroundRed:green:blue:alpha:`);
        var.ptr(fn(id,SEL,f32,f32,f32,f32)=>id) castedPtr: (pointerTo(objc_msgSend) => ptr(fn(id,SEL,f32,f32,f32,f32)=>id));
        castedPtr(LIL__applicationDelegate, selector, red, green, blue, alpha);
    }
}
