fn malloc (i64)=>ptr(i8) extern;
fn realloc (ptr(i8),i64)=>ptr(i8) extern;
fn free (ptr(i8)) extern;
#needs "std/cstd.lil";

const SMALL_BUFFER_SIZE: 2;
const BIG_BUFFER_MIN_SIZE: 10;

#export {

    #====== class @array ===========
    #= A dynamic array which automatically grows or shrinks as needed
    class @array (type @subtype) {
        alias sbuf => @subtype[SMALL_BUFFER_SIZE];
        
        #======== var buffer ===========
        #= The space for some values or a pointer to the first value
        var.sbuf|ptr(@subtype) buffer;

        #======== var size =============
        #= How many values are currently in the array
        var.i64 size: 0;

        #======== var capacity =========
        #= How much space is allocated for values
        var.i64 capacity: SMALL_BUFFER_SIZE;

        #========== fn at ==============
        #= Returns a pointer to the value at the given index or null if not found
        #===============================
        #= var index: the offset into the array 
        #-------------------------------
        #= return: a pointer to the value at given index or null
        #-------------------------------
        fn at(var.i64 index)=>ptr(@subtype)|null {
            puts `start of at method`;
            if index >= 0 {
                puts `index was greater or equal to 0`;
                printf(`index: %li\n`, index);
                printf(`size: %li\n`, @self.size);
                if index < @self.size {
                    puts `index was lower than @self.size`;
                    if @self.buffer => sbuf {
                        puts `buffer was sbuf`;
                        return pointerTo @self.buffer[index];
                    }
                    if @self.buffer => ptr(@subtype) {
                        puts `buffer was pointer`;
                        return @self.buffer + (sizeOf(type @subtype)*index);
                    }
                }
            }
            return null;
        };

        #=========== fn add ============
        #= Appends a value at the end of the array, resizing the array if necessary
        #===============================
        #= var value: the value to be inserted
        #-------------------------------
        fn add(var.@subtype value){
            puts `start of method add`;
            if @self.capacity > @self.size {
                puts `capacity was bigger than size`;
                if @self.buffer => sbuf {
                    puts `buffer was sbuf`;
                    @self.buffer[@self.size]: value;
                }
                if @self.buffer => ptr(@subtype) {
                    puts `buffer was pointer`;
                    var.ptr(@subtype) pointer: @self.buffer + @self.size;
                    set(pointer, value);
                }
            } else {
                puts `capacity was lower than size`;
                if @self.buffer => sbuf {
                    puts `buffer was sbuf`;
                    @self.capacity: BIG_BUFFER_MIN_SIZE;
                
                    var.ptr(@subtype) firstValue: pointerTo @self.buffer[0];
                    var.ptr(@subtype) secondValue: pointerTo @self.buffer[1];

                    var.ptr(@subtype) pointer: malloc(sizeOf(type @subtype) * BIG_BUFFER_MIN_SIZE) => ptr(@subtype);
                
                    set(pointer, valueOf(firstValue));
                    set(pointer + 1, valueOf(secondValue));
                    set(pointerTo(@self.buffer)=>ptr(ptr(@subtype)), pointer);
                    set(pointer+@self.size, value);
                }

                if @self.buffer => ptr(@subtype) {
                    puts `buffer was pointer`;
                    var.ptr(@subtype) pointer: realloc((@self.buffer => ptr(i8)), sizeOf(type @subtype) * @self.capacity) => ptr(@subtype);
                    @self.buffer: pointer;
                    set(pointer+@self.size, value);
                }
            }
            puts `increasing size by one`;
            @self.size +: 1;
        };

        #========= fn reserve ==========
        #= Use this method when you want to increase capacity for more elements ahead of time
        #===============================
        #= var newCapacity: how many elements will fit
        #-------------------------------
        fn reserve(var.i64 newCapacity) {
            printf(`Reserve called with %li\n`, newCapacity);
            if @self.capacity >= newCapacity {
                puts `already had enough capacity`;
                return;
            }
            puts `reserving new capacity`;
            if @self.buffer => ptr(@subtype) {
                puts `was pointer, realloc`;
                var.ptr(@subtype) pointer: realloc((@self.buffer => ptr(i8)), sizeOf(type @subtype) * newCapacity) => ptr(@subtype);
                @self.buffer: pointer;
            } else {
                puts `was static array, malloc`;
                var.ptr(@subtype) pointer: malloc(sizeOf(type @subtype) * newCapacity) => ptr(@subtype);
                @self.buffer: pointer;
            }
            puts `finished reserving`;
        };

        #======= fn initialize =========
        #= The runtime calls this method to set up the array before copying elements into it
        #===============================
        #= var newCapacity: how many elements will fit
        #-------------------------------
        fn initialize(var.i64 newCapacity)=>ptr(@subtype) {
            printf(`initialize with %li\n`, newCapacity);
            @self.size: 0;

            if newCapacity <= SMALL_BUFFER_SIZE {
                @self.buffer: [];
                @self.capacity: SMALL_BUFFER_SIZE;
                return pointerTo(@self.buffer) => ptr(@subtype);
            } else {
                var.ptr(@subtype) pointer: malloc(sizeOf(type @subtype) * newCapacity) => ptr(@subtype);
                @self.capacity: newCapacity;
                @self.buffer: pointer;
                return pointer;
            }
        };
    };
};
